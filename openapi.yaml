openapi: 3.0.0
info:
  version: 1.0.0
  title: Set and Tune API
  description: API for managing sets and tunes
servers:
  - url: 'https://localhost:8080'
paths:
  /:
    get:
      summary: Welcome to the Set and Tune API
      operationId: home
      responses:
        '200':
          description: Welcome message
      security:
        - ApiKeyAuth: []
      servers:
        - url: 'https://localhost:8080'
  /health:
    get:
      summary: Check the health of the service
      operationId: health
      responses:
        '200':
          $ref: '#/components/responses/Health'
        '503':
          description: Service Unavailable
      security:
        - ApiKeyAuth: []
      servers:
        - url: 'https://localhost:8080'
  /tunes:
    get:
      summary: List all tunes
      operationId: listTunes
      responses:
        '200':
          description: A list of tunes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tune'
        default:
          $ref: '#/components/responses/Error'
      security:
        - ApiKeyAuth: []
      servers:
        - url: 'https://localhost:8080'
    post:
      summary: Create a new tune
      operationId: createTune
      requestBody:
        description: Tune object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTune'
      responses:
        '201':
          description: The created tune
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tune'
        '400':
          $ref: '#/components/responses/InvalidInput'
        default:
          $ref: '#/components/responses/Error'
      security:
        - ApiKeyAuth: []
      servers:
        - url: 'https://localhost:8080'
  '/tunes/{tuneId}':
    get:
      summary: Get a tune by ID
      operationId: getTune
      parameters:
        - $ref: '#/components/parameters/tuneId'
      responses:
        '200':
          description: The requested tune
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tune'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Error'
      security:
        - ApiKeyAuth: []
      servers:
        - url: 'https://localhost:8080'
    put:
      summary: Update a tune by ID
      operationId: updateTune
      parameters:
        - $ref: '#/components/parameters/tuneId'
      requestBody:
        description: Tune object to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTune'
      responses:
        '204':
          description: The tune was updated
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Error'
      security:
        - ApiKeyAuth: []
      servers:
        - url: 'https://localhost:8080'
    delete:
      summary: Delete a tune by ID
      operationId: deleteTune
      parameters:
        - $ref: '#/components/parameters/tuneId'
      responses:
        '204':
          description: Tune deleted
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Error'
      security:
        - ApiKeyAuth: []
      servers:
        - url: 'https://localhost:8080'
  /sets:
    get:
      summary: List all sets
      operationId: listSets
      responses:
        '200':
          description: A list of sets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MusicSet'
        default:
          $ref: '#/components/responses/Error'
      security:
        - ApiKeyAuth: []
      servers:
        - url: 'https://localhost:8080'
    post:
      summary: Create a new set
      operationId: createSet
      requestBody:
        description: Set object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSet'
      responses:
        '201':
          description: The created set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MusicSet'
        '400':
          $ref: '#/components/responses/InvalidInput'
        default:
          $ref: '#/components/responses/Error'
      security:
        - ApiKeyAuth: []
      servers:
        - url: 'https://localhost:8080'
  '/sets/{setId}':
    get:
      summary: Get a set by ID
      operationId: getSet
      parameters:
        - $ref: '#/components/parameters/setId'
      responses:
        '200':
          description: The requested set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MusicSet'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Error'
      security:
        - ApiKeyAuth: []
      servers:
        - url: 'https://localhost:8080'
    put:
      summary: Update a set by ID
      operationId: updateSet
      parameters:
        - $ref: '#/components/parameters/setId'
      requestBody:
        description: Set object to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSet'
      responses:
        '204':
          description: The updated set
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Error'
      security:
        - ApiKeyAuth: []
      servers:
        - url: 'https://localhost:8080'
    delete:
      summary: Delete a set by ID
      operationId: deleteSet
      parameters:
        - $ref: '#/components/parameters/setId'
      responses:
        '204':
          description: Set deleted
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Error'
      security:
        - ApiKeyAuth: []
      servers:
        - url: 'https://localhost:8080'
  '/sets/{setId}/tunes':
    put:
      summary: Assign tunes to a set
      operationId: assignTunesToSet
      parameters:
        - $ref: '#/components/parameters/setId'
      requestBody:
        description: Array of tune IDs which should be the tunes of the set
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TuneIdList'
      responses:
        '200':
          description: The updated set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MusicSet'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Error'
      security:
        - ApiKeyAuth: []
      servers:
        - url: 'https://localhost:8080'
  /imports:
    post:
      summary: Import tunes/sets from a file
      operationId: importFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          $ref: '#/components/responses/Import'
        default:
          $ref: '#/components/responses/Error'
      security:
        - ApiKeyAuth: []
      servers:
        - url: 'https://localhost:8080'
components:
  parameters:
    tuneId:
      name: tuneId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    setId:
      name: setId
      in: path
      required: true
      schema:
        type: string
        format: uuid
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY
      in: header
  responses:
    Error:
      description: General error for the service
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidInput:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Unable to find resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Import:
      description: Information about an import of one file
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImportFile'
    Health:
      description: Health response
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                $ref: '#/components/schemas/HealthStatus'
              details:
                type: object
                properties:
                  database:
                    type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/HealthStatus'
                      timestamp:
                        type: string
                        format: date-time
            x-examples:
              Example 1:
                status: up
                details:
                  database:
                    status: up
                    timestamp: '2024-07-21T13:14:18.973593348Z'
  schemas:
    Tune:
      allOf:
        - $ref: '#/components/schemas/ObjectId'
        - $ref: '#/components/schemas/TuneProperties'
    ObjectId:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
      required:
        - id
    Id:
      type: string
      description: Unique identifier for an object
      format: uuid
    TuneProperties:
      type: object
      properties:
        title:
          type: string
        type:
          type: string
        timeSig:
          type: string
        composer:
          type: string
        arranger:
          type: string
      required:
        - title
    CreateTune:
      allOf:
        - $ref: '#/components/schemas/TuneProperties'
    UpdateTune:
      allOf:
        - $ref: '#/components/schemas/TuneProperties'
    MusicSet:
      description: Called MusicSet and not only Set because of name clash in e.g. typescript
      allOf:
        - $ref: '#/components/schemas/ObjectId'
        - $ref: '#/components/schemas/SetProperties'
    SetProperties:
      type: object
      allOf:
        - $ref: '#/components/schemas/BasicSetProperties'
        - type: object
          properties:
            tunes:
              type: array
              items:
                $ref: '#/components/schemas/Tune'
    BasicSetProperties:
      type: object
      properties:
        title:
          type: string
          description: The name of the Set
        description:
          type: string
          description: A description of the Set
        creator:
          type: string
          description: The name of the creator of the set
      required:
        - title
    CreateSet:
      allOf:
        - $ref: '#/components/schemas/CreateUpdateSetProperties'
    CreateUpdateSetProperties:
      type: object
      allOf:
        - $ref: '#/components/schemas/BasicSetProperties'
        - type: object
          properties:
            tunes:
              $ref: '#/components/schemas/TuneIdList'
    TuneIdList:
      type: array
      items:
        $ref: '#/components/schemas/Id'
      example:
        - e4635d0e-3101-4c7e-a84b-7271dea0834e
        - d8686947-5e7b-4d26-b7e6-cbaaded2405a
        - a243cd85-45fb-4940-bad6-549cab3f096f
    UpdateSet:
      allOf:
        - $ref: '#/components/schemas/CreateUpdateSetProperties'
    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    ImportFile:
      type: object
      properties:
        name:
          type: string
          description: the imported filename
        set:
          $ref: '#/components/schemas/BasicMusicSet'
        tunes:
          type: array
          description: 'if import was successful, the array of imported tunes'
          items:
            $ref: '#/components/schemas/ImportTune'
      required:
        - name
    BasicMusicSet:
      allOf:
        - $ref: '#/components/schemas/ObjectId'
        - $ref: '#/components/schemas/BasicSetProperties'
    ImportTune:
      allOf:
        - $ref: '#/components/schemas/Tune'
        - $ref: '#/components/schemas/ImportInfo'
    ImportInfo:
      type: object
      title: ImportInfo
      properties:
        warnings:
          type: array
          items:
            type: string
        errors:
          type: array
          items:
            type: string
        infos:
          type: array
          items:
            type: string
    HealthStatus:
      type: string
      enum:
        - up
        - down
      title: HealthStatus
      readOnly: true
security:
  - ApiKeyAuth: []
